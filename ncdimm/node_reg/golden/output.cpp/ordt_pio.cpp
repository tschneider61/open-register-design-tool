//   Ordt 190524.01 autogenerated file 
//   Input: ./node_reg.rdl
//   Parms: ./node_reg.params
//   Date: Sun Dec 06 17:52:46 EST 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_node_reg_type_node methods ------------------

ordt_rg_node_reg_type_node::ordt_rg_node_reg_type_node(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    absolute_node_number(0, 16, 0x0, r_std, w_std),
    condor_system(16, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_type_node::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_type_node at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_type_node\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_type_node::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  absolute_node_number.write(wdata);
  condor_system.write(wdata);
}

int  ordt_rg_node_reg_type_node::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_type_node at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_type_node\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_type_node::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  absolute_node_number.read(rdata);
  condor_system.read(rdata);
}

// ------------------ ordt_rg_node_reg_num_nodes methods ------------------

ordt_rg_node_reg_num_nodes::ordt_rg_node_reg_num_nodes(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    log2_num_nodes(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_num_nodes::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_num_nodes at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_num_nodes\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_num_nodes::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  log2_num_nodes.write(wdata);
}

int  ordt_rg_node_reg_num_nodes::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_num_nodes at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_num_nodes\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_num_nodes::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  log2_num_nodes.read(rdata);
}

// ------------------ ordt_rg_node_reg_msp_size methods ------------------

ordt_rg_node_reg_msp_size::ordt_rg_node_reg_msp_size(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    msp_size(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_msp_size::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_msp_size at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_msp_size\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_msp_size::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  msp_size.write(wdata);
}

int  ordt_rg_node_reg_msp_size::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_msp_size at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_msp_size\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_msp_size::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  msp_size.read(rdata);
}

// ------------------ ordt_rg_node_reg_clst_msp methods ------------------

ordt_rg_node_reg_clst_msp::ordt_rg_node_reg_clst_msp(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    num_msps(0, 4, 0x0, r_std, w_none),
    num_clusters(32, 4, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_clst_msp::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_clst_msp at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_clst_msp\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_clst_msp::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  num_msps.write(wdata);
  num_clusters.write(wdata);
}

int  ordt_rg_node_reg_clst_msp::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_clst_msp at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_clst_msp\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_clst_msp::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  num_msps.read(rdata);
  num_clusters.read(rdata);
}

// ------------------ ordt_rg_node_reg_cores_cluster methods ------------------

ordt_rg_node_reg_cores_cluster::ordt_rg_node_reg_cores_cluster(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    cores_per_cluster(0, 4, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_cores_cluster::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_cores_cluster at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_cores_cluster\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_cores_cluster::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  cores_per_cluster.write(wdata);
}

int  ordt_rg_node_reg_cores_cluster::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_cores_cluster at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_cores_cluster\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_cores_cluster::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  cores_per_cluster.read(rdata);
}

// ------------------ ordt_rg_node_reg_avl_mon methods ------------------

ordt_rg_node_reg_avl_mon::ordt_rg_node_reg_avl_mon(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    enable_pcie_read(0, 1, 0x1, r_std, w_std),
    avalon_monitor_bypass0(8, 1, 0x1, r_std, w_std),
    avalon_monitor_bypass2(9, 1, 0x1, r_std, w_std),
    avalon_timeout_bar0(16, 16, 0xffff, r_std, w_std),
    avalon_timeout_bar2(32, 16, 0xffff, r_std, w_std) {
}

int  ordt_rg_node_reg_avl_mon::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_avl_mon at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_avl_mon\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_avl_mon::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  enable_pcie_read.write(wdata);
  avalon_monitor_bypass0.write(wdata);
  avalon_monitor_bypass2.write(wdata);
  avalon_timeout_bar0.write(wdata);
  avalon_timeout_bar2.write(wdata);
}

int  ordt_rg_node_reg_avl_mon::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_avl_mon at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_avl_mon\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_avl_mon::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  enable_pcie_read.read(rdata);
  avalon_monitor_bypass0.read(rdata);
  avalon_monitor_bypass2.read(rdata);
  avalon_timeout_bar0.read(rdata);
  avalon_timeout_bar2.read(rdata);
}

// ------------------ ordt_rg_node_reg_dbg_mon methods ------------------

ordt_rg_node_reg_dbg_mon::ordt_rg_node_reg_dbg_mon(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    mfe_debug_enabled(1, 1, 0x0, r_std, w_none),
    ncr_debug_enabled(2, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_dbg_mon::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_dbg_mon at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_dbg_mon\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_dbg_mon::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  mfe_debug_enabled.write(wdata);
  ncr_debug_enabled.write(wdata);
}

int  ordt_rg_node_reg_dbg_mon::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_dbg_mon at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_dbg_mon\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_dbg_mon::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  mfe_debug_enabled.read(rdata);
  ncr_debug_enabled.read(rdata);
}

// ------------------ ordt_rg_node_reg_rt_ctr methods ------------------

ordt_rg_node_reg_rt_ctr::ordt_rg_node_reg_rt_ctr(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    real_time_counter(0, 64, 0xffffffffffffffff, r_std, w_std) {
}

int  ordt_rg_node_reg_rt_ctr::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_rt_ctr at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_rt_ctr\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_rt_ctr::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  real_time_counter.write(wdata);
}

int  ordt_rg_node_reg_rt_ctr::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_rt_ctr at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_rt_ctr\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_rt_ctr::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  real_time_counter.read(rdata);
}

// ------------------ ordt_rg_node_reg_ign_pa methods ------------------

ordt_rg_node_reg_ign_pa::ordt_rg_node_reg_ign_pa(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ignore_phy_addr(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_ign_pa::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ign_pa at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ign_pa\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ign_pa::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ignore_phy_addr.write(wdata);
}

int  ordt_rg_node_reg_ign_pa::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ign_pa at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ign_pa\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ign_pa::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ignore_phy_addr.read(rdata);
}

// ------------------ ordt_rg_node_reg_dis_ls methods ------------------

ordt_rg_node_reg_dis_ls::ordt_rg_node_reg_dis_ls(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    disable_local_spawn(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_dis_ls::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_dis_ls at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_dis_ls\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_dis_ls::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  disable_local_spawn.write(wdata);
}

int  ordt_rg_node_reg_dis_ls::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_dis_ls at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_dis_ls\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_dis_ls::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  disable_local_spawn.read(rdata);
}

// ------------------ ordt_rg_node_reg_cdt1 methods ------------------

ordt_rg_node_reg_cdt1::ordt_rg_node_reg_cdt1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    node_credits(0, 16, 0x0, r_std, w_std),
    overwrite_credits(63, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_cdt1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_cdt1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_cdt1\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_cdt1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  node_credits.write(wdata);
  overwrite_credits.write(wdata);
}

int  ordt_rg_node_reg_cdt1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_cdt1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_cdt1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_cdt1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  node_credits.read(rdata);
  overwrite_credits.read(rdata);
}

// ------------------ ordt_rg_node_reg_cdt2 methods ------------------

ordt_rg_node_reg_cdt2::ordt_rg_node_reg_cdt2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    node_threads(0, 16, 0x0, r_std, w_none),
    enable_credits(32, 1, 0x1, r_std, w_std),
    track_migration(63, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_node_reg_cdt2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_cdt2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_cdt2\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_cdt2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  node_threads.write(wdata);
  enable_credits.write(wdata);
  track_migration.write(wdata);
}

int  ordt_rg_node_reg_cdt2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_cdt2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_cdt2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_cdt2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  node_threads.read(rdata);
  enable_credits.read(rdata);
  track_migration.read(rdata);
}

// ------------------ ordt_rg_node_reg_hilo methods ------------------

ordt_rg_node_reg_hilo::ordt_rg_node_reg_hilo(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    dsp_lo(0, 1, 0x0, r_std, w_std),
    dsp_hi(1, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_node_reg_hilo::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_hilo at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_hilo\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_hilo::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  dsp_lo.write(wdata);
  dsp_hi.write(wdata);
}

int  ordt_rg_node_reg_hilo::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_hilo at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_hilo\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_hilo::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  dsp_lo.read(rdata);
  dsp_hi.read(rdata);
}

// ------------------ ordt_rg_node_reg_rst methods ------------------

ordt_rg_node_reg_rst::ordt_rg_node_reg_rst(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    reset_cluster(0, 4, 0x0, r_std, w_std),
    reset_msp(4, 4, 0x0, r_std, w_std),
    reset_me(8, 1, 0x0, r_std, w_std),
    reset_emif(16, 8, 0x0, r_std, w_std),
    reset_srio(24, 6, 0x0, r_std, w_std),
    reset_srio_control(30, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_node_reg_rst::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_rst at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_rst\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_rst::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  reset_cluster.write(wdata);
  reset_msp.write(wdata);
  reset_me.write(wdata);
  reset_emif.write(wdata);
  reset_srio.write(wdata);
  reset_srio_control.write(wdata);
}

int  ordt_rg_node_reg_rst::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_rst at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_rst\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_rst::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  reset_cluster.read(rdata);
  reset_msp.read(rdata);
  reset_me.read(rdata);
  reset_emif.read(rdata);
  reset_srio.read(rdata);
  reset_srio_control.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_0 methods ------------------

ordt_rg_node_reg_amm_0::ordt_rg_node_reg_amm_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_0_read_req(0, 32, 0x0, r_std, w_none),
    amm_0_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_0\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_0_read_req.write(wdata);
  amm_0_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_0::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_0_read_req.read(rdata);
  amm_0_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_1 methods ------------------

ordt_rg_node_reg_amm_1::ordt_rg_node_reg_amm_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_1_read_req(0, 32, 0x0, r_std, w_none),
    amm_1_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_1\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_1_read_req.write(wdata);
  amm_1_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_1_read_req.read(rdata);
  amm_1_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_2 methods ------------------

ordt_rg_node_reg_amm_2::ordt_rg_node_reg_amm_2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_2_read_req(0, 32, 0x0, r_std, w_none),
    amm_2_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_2\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_2_read_req.write(wdata);
  amm_2_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_2_read_req.read(rdata);
  amm_2_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_3 methods ------------------

ordt_rg_node_reg_amm_3::ordt_rg_node_reg_amm_3(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_3_read_req(0, 32, 0x0, r_std, w_none),
    amm_3_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_3::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_3 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_3\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_3::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_3_read_req.write(wdata);
  amm_3_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_3::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_3 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_3\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_3::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_3_read_req.read(rdata);
  amm_3_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_4 methods ------------------

ordt_rg_node_reg_amm_4::ordt_rg_node_reg_amm_4(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_4_read_req(0, 32, 0x0, r_std, w_none),
    amm_4_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_4::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_4 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_4\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_4::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_4_read_req.write(wdata);
  amm_4_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_4::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_4 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_4\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_4::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_4_read_req.read(rdata);
  amm_4_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_5 methods ------------------

ordt_rg_node_reg_amm_5::ordt_rg_node_reg_amm_5(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_5_read_req(0, 32, 0x0, r_std, w_none),
    amm_5_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_5::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_5 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_5\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_5::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_5_read_req.write(wdata);
  amm_5_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_5::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_5 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_5\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_5::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_5_read_req.read(rdata);
  amm_5_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_6 methods ------------------

ordt_rg_node_reg_amm_6::ordt_rg_node_reg_amm_6(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_6_read_req(0, 32, 0x0, r_std, w_none),
    amm_6_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_6::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_6 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_6\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_6::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_6_read_req.write(wdata);
  amm_6_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_6::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_6 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_6\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_6::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_6_read_req.read(rdata);
  amm_6_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_amm_7 methods ------------------

ordt_rg_node_reg_amm_7::ordt_rg_node_reg_amm_7(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    amm_7_read_req(0, 32, 0x0, r_std, w_none),
    amm_7_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_amm_7::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_amm_7 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_amm_7\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_amm_7::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  amm_7_read_req.write(wdata);
  amm_7_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_amm_7::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_amm_7 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_amm_7\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_amm_7::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  amm_7_read_req.read(rdata);
  amm_7_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_avs_sc methods ------------------

ordt_rg_node_reg_avs_sc::ordt_rg_node_reg_avs_sc(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_sc_read_req(0, 32, 0x0, r_std, w_none),
    avs_sc_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_avs_sc::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_avs_sc at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_avs_sc\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_avs_sc::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_sc_read_req.write(wdata);
  avs_sc_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_avs_sc::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_avs_sc at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_avs_sc\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_avs_sc::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_sc_read_req.read(rdata);
  avs_sc_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_0 methods ------------------

ordt_rg_node_reg_ndlt_0::ordt_rg_node_reg_ndlt_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_0_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_0_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_0\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_0_read_req.write(wdata);
  avs_ndlt_0_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_0::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_0_read_req.read(rdata);
  avs_ndlt_0_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_1 methods ------------------

ordt_rg_node_reg_ndlt_1::ordt_rg_node_reg_ndlt_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_1_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_1_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_1\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_1_read_req.write(wdata);
  avs_ndlt_1_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_1::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_1_read_req.read(rdata);
  avs_ndlt_1_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_2 methods ------------------

ordt_rg_node_reg_ndlt_2::ordt_rg_node_reg_ndlt_2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_2_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_2_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_2\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_2_read_req.write(wdata);
  avs_ndlt_2_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_2_read_req.read(rdata);
  avs_ndlt_2_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_3 methods ------------------

ordt_rg_node_reg_ndlt_3::ordt_rg_node_reg_ndlt_3(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_3_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_3_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_3::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_3 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_3\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_3::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_3_read_req.write(wdata);
  avs_ndlt_3_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_3::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_3 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_3\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_3::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_3_read_req.read(rdata);
  avs_ndlt_3_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_4 methods ------------------

ordt_rg_node_reg_ndlt_4::ordt_rg_node_reg_ndlt_4(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_4_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_4_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_4::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_4 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_4\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_4::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_4_read_req.write(wdata);
  avs_ndlt_4_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_4::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_4 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_4\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_4::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_4_read_req.read(rdata);
  avs_ndlt_4_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_5 methods ------------------

ordt_rg_node_reg_ndlt_5::ordt_rg_node_reg_ndlt_5(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_5_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_5_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_5::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_5 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_5\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_5::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_5_read_req.write(wdata);
  avs_ndlt_5_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_5::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_5 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_5\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_5::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_5_read_req.read(rdata);
  avs_ndlt_5_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_6 methods ------------------

ordt_rg_node_reg_ndlt_6::ordt_rg_node_reg_ndlt_6(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_6_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_6_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_6::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_6 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_6\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_6::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_6_read_req.write(wdata);
  avs_ndlt_6_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_6::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_6 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_6\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_6::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_6_read_req.read(rdata);
  avs_ndlt_6_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ndlt_7 methods ------------------

ordt_rg_node_reg_ndlt_7::ordt_rg_node_reg_ndlt_7(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ndlt_7_read_req(0, 32, 0x0, r_std, w_none),
    avs_ndlt_7_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ndlt_7::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ndlt_7 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_7\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ndlt_7::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ndlt_7_read_req.write(wdata);
  avs_ndlt_7_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ndlt_7::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ndlt_7 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ndlt_7\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ndlt_7::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ndlt_7_read_req.read(rdata);
  avs_ndlt_7_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_me_reg methods ------------------

ordt_rg_node_reg_me_reg::ordt_rg_node_reg_me_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_me_regif_read_req(0, 32, 0x0, r_std, w_none),
    avs_me_regif_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_me_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_me_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_me_reg\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_me_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_me_regif_read_req.write(wdata);
  avs_me_regif_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_me_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_me_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_me_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_me_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_me_regif_read_req.read(rdata);
  avs_me_regif_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_ncr_reg methods ------------------

ordt_rg_node_reg_ncr_reg::ordt_rg_node_reg_ncr_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    avs_ncr_regif_read_req(0, 32, 0x0, r_std, w_none),
    avs_ncr_regif_read_rsp(32, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_ncr_reg::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_ncr_reg at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_ncr_reg\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_ncr_reg::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  avs_ncr_regif_read_req.write(wdata);
  avs_ncr_regif_read_rsp.write(wdata);
}

int  ordt_rg_node_reg_ncr_reg::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_ncr_reg at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_ncr_reg\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_ncr_reg::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  avs_ncr_regif_read_req.read(rdata);
  avs_ncr_regif_read_rsp.read(rdata);
}

// ------------------ ordt_rg_node_reg_cal_fail methods ------------------

ordt_rg_node_reg_cal_fail::ordt_rg_node_reg_cal_fail(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    all_mem_cal_success(0, 8, 0x0, r_std, w_none),
    all_mem_cal_fail(8, 8, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_cal_fail::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_cal_fail at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_cal_fail\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_cal_fail::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  all_mem_cal_success.write(wdata);
  all_mem_cal_fail.write(wdata);
}

int  ordt_rg_node_reg_cal_fail::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_cal_fail at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_cal_fail\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_cal_fail::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  all_mem_cal_success.read(rdata);
  all_mem_cal_fail.read(rdata);
}

// ------------------ ordt_rg_node_reg_bar0 methods ------------------

ordt_rg_node_reg_bar0::ordt_rg_node_reg_bar0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    max_wait_delay_bar0(0, 17, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_bar0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_bar0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_bar0\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_bar0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  max_wait_delay_bar0.write(wdata);
}

int  ordt_rg_node_reg_bar0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_bar0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_bar0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_bar0::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  max_wait_delay_bar0.read(rdata);
}

// ------------------ ordt_rg_node_reg_bar2 methods ------------------

ordt_rg_node_reg_bar2::ordt_rg_node_reg_bar2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    max_wait_delay_bar2(0, 17, 0x0, r_std, w_none),
    sc_bar2_read_burst_set(32, 6, 0x0, r_std, w_none),
    sc_bar2_write_burst_set(40, 6, 0x0, r_std, w_none) {
}

int  ordt_rg_node_reg_bar2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_node_reg_bar2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_node_reg_bar2\n";
  #endif
     return 8;
}

void  ordt_rg_node_reg_bar2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  max_wait_delay_bar2.write(wdata);
  sc_bar2_read_burst_set.write(wdata);
  sc_bar2_write_burst_set.write(wdata);
}

int  ordt_rg_node_reg_bar2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_node_reg_bar2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_node_reg_bar2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_node_reg_bar2::read(ordt_data &rdata) {
  rdata.clear();
  for (uint64_t widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  max_wait_delay_bar2.read(rdata);
  sc_bar2_read_burst_set.read(rdata);
  sc_bar2_write_burst_set.read(rdata);
}

// ------------------ ordt_rset_node methods ------------------

ordt_rset_node::ordt_rset_node(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    reg_type_node(_m_startaddress + 0x0, _m_startaddress + 0x7),
    reg_num_nodes(_m_startaddress + 0x8, _m_startaddress + 0xf),
    reg_msp_size(_m_startaddress + 0x10, _m_startaddress + 0x17),
    reg_clst_msp(_m_startaddress + 0x18, _m_startaddress + 0x1f),
    reg_cores_cluster(_m_startaddress + 0x20, _m_startaddress + 0x27),
    reg_avl_mon(_m_startaddress + 0x28, _m_startaddress + 0x2f),
    reg_dbg_mon(_m_startaddress + 0x30, _m_startaddress + 0x33),
    reg_rt_ctr(_m_startaddress + 0x38, _m_startaddress + 0x3f),
    reg_ign_pa(_m_startaddress + 0x40, _m_startaddress + 0x43),
    reg_dis_ls(_m_startaddress + 0x44, _m_startaddress + 0x47),
    reg_cdt1(_m_startaddress + 0x48, _m_startaddress + 0x4f),
    reg_cdt2(_m_startaddress + 0x50, _m_startaddress + 0x57),
    reg_hilo(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    reg_rst(_m_startaddress + 0x60, _m_startaddress + 0x67),
    reg_amm_0(_m_startaddress + 0x68, _m_startaddress + 0x6f),
    reg_amm_1(_m_startaddress + 0x70, _m_startaddress + 0x77),
    reg_amm_2(_m_startaddress + 0x78, _m_startaddress + 0x7f),
    reg_amm_3(_m_startaddress + 0x80, _m_startaddress + 0x87),
    reg_amm_4(_m_startaddress + 0x88, _m_startaddress + 0x8f),
    reg_amm_5(_m_startaddress + 0x90, _m_startaddress + 0x97),
    reg_amm_6(_m_startaddress + 0x98, _m_startaddress + 0x9f),
    reg_amm_7(_m_startaddress + 0xa0, _m_startaddress + 0xa7),
    reg_avs_sc(_m_startaddress + 0xa8, _m_startaddress + 0xaf),
    reg_ndlt_0(_m_startaddress + 0xb0, _m_startaddress + 0xb7),
    reg_ndlt_1(_m_startaddress + 0xb8, _m_startaddress + 0xbf),
    reg_ndlt_2(_m_startaddress + 0xc0, _m_startaddress + 0xc7),
    reg_ndlt_3(_m_startaddress + 0xc8, _m_startaddress + 0xcf),
    reg_ndlt_4(_m_startaddress + 0xd0, _m_startaddress + 0xd7),
    reg_ndlt_5(_m_startaddress + 0xd8, _m_startaddress + 0xdf),
    reg_ndlt_6(_m_startaddress + 0xe0, _m_startaddress + 0xe7),
    reg_ndlt_7(_m_startaddress + 0xe8, _m_startaddress + 0xef),
    reg_me_reg(_m_startaddress + 0xf0, _m_startaddress + 0xf7),
    reg_ncr_reg(_m_startaddress + 0xf8, _m_startaddress + 0xff),
    reg_cal_fail(_m_startaddress + 0x100, _m_startaddress + 0x107),
    reg_bar0(_m_startaddress + 0x108, _m_startaddress + 0x10f),
    reg_bar2(_m_startaddress + 0x110, _m_startaddress + 0x117) {
  m_children.push_back(&reg_type_node);
  m_children.push_back(&reg_num_nodes);
  m_children.push_back(&reg_msp_size);
  m_children.push_back(&reg_clst_msp);
  m_children.push_back(&reg_cores_cluster);
  m_children.push_back(&reg_avl_mon);
  m_children.push_back(&reg_dbg_mon);
  m_children.push_back(&reg_rt_ctr);
  m_children.push_back(&reg_ign_pa);
  m_children.push_back(&reg_dis_ls);
  m_children.push_back(&reg_cdt1);
  m_children.push_back(&reg_cdt2);
  m_children.push_back(&reg_hilo);
  m_children.push_back(&reg_rst);
  m_children.push_back(&reg_amm_0);
  m_children.push_back(&reg_amm_1);
  m_children.push_back(&reg_amm_2);
  m_children.push_back(&reg_amm_3);
  m_children.push_back(&reg_amm_4);
  m_children.push_back(&reg_amm_5);
  m_children.push_back(&reg_amm_6);
  m_children.push_back(&reg_amm_7);
  m_children.push_back(&reg_avs_sc);
  m_children.push_back(&reg_ndlt_0);
  m_children.push_back(&reg_ndlt_1);
  m_children.push_back(&reg_ndlt_2);
  m_children.push_back(&reg_ndlt_3);
  m_children.push_back(&reg_ndlt_4);
  m_children.push_back(&reg_ndlt_5);
  m_children.push_back(&reg_ndlt_6);
  m_children.push_back(&reg_ndlt_7);
  m_children.push_back(&reg_me_reg);
  m_children.push_back(&reg_ncr_reg);
  m_children.push_back(&reg_cal_fail);
  m_children.push_back(&reg_bar0);
  m_children.push_back(&reg_bar2);
}

void  ordt_rset_node::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&reg_type_node);
  m_children.push_back(&reg_num_nodes);
  m_children.push_back(&reg_msp_size);
  m_children.push_back(&reg_clst_msp);
  m_children.push_back(&reg_cores_cluster);
  m_children.push_back(&reg_avl_mon);
  m_children.push_back(&reg_dbg_mon);
  m_children.push_back(&reg_rt_ctr);
  m_children.push_back(&reg_ign_pa);
  m_children.push_back(&reg_dis_ls);
  m_children.push_back(&reg_cdt1);
  m_children.push_back(&reg_cdt2);
  m_children.push_back(&reg_hilo);
  m_children.push_back(&reg_rst);
  m_children.push_back(&reg_amm_0);
  m_children.push_back(&reg_amm_1);
  m_children.push_back(&reg_amm_2);
  m_children.push_back(&reg_amm_3);
  m_children.push_back(&reg_amm_4);
  m_children.push_back(&reg_amm_5);
  m_children.push_back(&reg_amm_6);
  m_children.push_back(&reg_amm_7);
  m_children.push_back(&reg_avs_sc);
  m_children.push_back(&reg_ndlt_0);
  m_children.push_back(&reg_ndlt_1);
  m_children.push_back(&reg_ndlt_2);
  m_children.push_back(&reg_ndlt_3);
  m_children.push_back(&reg_ndlt_4);
  m_children.push_back(&reg_ndlt_5);
  m_children.push_back(&reg_ndlt_6);
  m_children.push_back(&reg_ndlt_7);
  m_children.push_back(&reg_me_reg);
  m_children.push_back(&reg_ncr_reg);
  m_children.push_back(&reg_cal_fail);
  m_children.push_back(&reg_bar0);
  m_children.push_back(&reg_bar2);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x200117) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    node(_m_startaddress + 0x200000, _m_startaddress + 0x2001ff) {
  m_children.push_back(&node);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&node);
}


//   Ordt 190524.01 autogenerated file 
//   Input: ./node_reg.rdl
//   Parms: ./node_reg.params
//   Date: Sun Dec 06 17:52:46 EST 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// Register reg_type_node
class reg_top_node_reg_type_node extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl absolute_node_number;
  rand uvm_reg_field_rdl condor_system;
  
  function new(string name = "reg_top_node_reg_type_node");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.absolute_node_number = new("absolute_node_number");
    this.absolute_node_number.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.absolute_node_number.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.condor_system = new("condor_system");
    this.condor_system.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.condor_system.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "absolute_node_number"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "condor_system"}, 16, 1);
  endfunction: build
  
endclass : reg_top_node_reg_type_node

// Register reg_num_nodes
class reg_top_node_reg_num_nodes extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl log2_num_nodes;
  
  function new(string name = "reg_top_node_reg_num_nodes");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.log2_num_nodes = new("log2_num_nodes");
    this.log2_num_nodes.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.log2_num_nodes.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "log2_num_nodes"}, 0, 5);
  endfunction: build
  
endclass : reg_top_node_reg_num_nodes

// Register reg_msp_size
class reg_top_node_reg_msp_size extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl msp_size;
  
  function new(string name = "reg_top_node_reg_msp_size");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.msp_size = new("msp_size");
    this.msp_size.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.msp_size.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "msp_size"}, 0, 2);
  endfunction: build
  
endclass : reg_top_node_reg_msp_size

// Register reg_clst_msp
class reg_top_node_reg_clst_msp extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl num_msps;
  rand uvm_reg_field_rdl num_clusters;
  
  function new(string name = "reg_top_node_reg_clst_msp");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.num_msps = new("num_msps");
    this.num_msps.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.num_msps.configure(this, 4, 0, "RO", 1, 4'h0, 1, 0, 0);
    this.num_clusters = new("num_clusters");
    this.num_clusters.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.num_clusters.configure(this, 4, 32, "RO", 1, 4'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "num_msps"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "num_clusters"}, 32, 4);
  endfunction: build
  
endclass : reg_top_node_reg_clst_msp

// Register reg_cores_cluster
class reg_top_node_reg_cores_cluster extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl cores_per_cluster;
  
  function new(string name = "reg_top_node_reg_cores_cluster");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.cores_per_cluster = new("cores_per_cluster");
    this.cores_per_cluster.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.cores_per_cluster.configure(this, 4, 0, "RO", 1, 4'h0, 1, 0, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "cores_per_cluster"}, 0, 4);
  endfunction: build
  
endclass : reg_top_node_reg_cores_cluster

// Register reg_avl_mon
class reg_top_node_reg_avl_mon extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl enable_pcie_read;
  rand uvm_reg_field_rdl avalon_monitor_bypass0;
  rand uvm_reg_field_rdl avalon_timeout_bar0;
  rand uvm_reg_field_rdl avalon_timeout_bar2;
  rand uvm_reg_field_rdl avalon_monitor_bypass2;
  
  function new(string name = "reg_top_node_reg_avl_mon");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.enable_pcie_read = new("enable_pcie_read");
    this.enable_pcie_read.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.enable_pcie_read.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.avalon_monitor_bypass0 = new("avalon_monitor_bypass0");
    this.avalon_monitor_bypass0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.avalon_monitor_bypass0.configure(this, 1, 8, "RW", 0, 1'h1, 1, 1, 0);
    this.avalon_timeout_bar0 = new("avalon_timeout_bar0");
    this.avalon_timeout_bar0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.avalon_timeout_bar0.configure(this, 16, 16, "RW", 0, 16'hffff, 1, 1, 0);
    this.avalon_timeout_bar2 = new("avalon_timeout_bar2");
    this.avalon_timeout_bar2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.avalon_timeout_bar2.configure(this, 16, 32, "RW", 0, 16'hffff, 1, 1, 0);
    this.avalon_monitor_bypass2 = new("avalon_monitor_bypass2");
    this.avalon_monitor_bypass2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.avalon_monitor_bypass2.configure(this, 1, 9, "RW", 0, 1'h1, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "enable_pcie_read"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "avalon_monitor_bypass0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "avalon_timeout_bar0"}, 16, 16);
    add_hdl_path_slice({rdl_reg_name, "avalon_timeout_bar2"}, 32, 16);
    add_hdl_path_slice({rdl_reg_name, "avalon_monitor_bypass2"}, 9, 1);
  endfunction: build
  
endclass : reg_top_node_reg_avl_mon

// Register reg_dbg_mon
class reg_top_node_reg_dbg_mon extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl mfe_debug_enabled;
  rand uvm_reg_field_rdl ncr_debug_enabled;
  
  function new(string name = "reg_top_node_reg_dbg_mon");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.mfe_debug_enabled = new("mfe_debug_enabled");
    this.mfe_debug_enabled.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.mfe_debug_enabled.configure(this, 1, 1, "RO", 1, 1'h0, 1, 0, 0);
    this.ncr_debug_enabled = new("ncr_debug_enabled");
    this.ncr_debug_enabled.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.ncr_debug_enabled.configure(this, 1, 2, "RO", 1, 1'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "mfe_debug_enabled"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ncr_debug_enabled"}, 2, 1);
  endfunction: build
  
endclass : reg_top_node_reg_dbg_mon

// Register reg_rt_ctr
class reg_top_node_reg_rt_ctr extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl real_time_counter;
  
  function new(string name = "reg_top_node_reg_rt_ctr");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.real_time_counter = new("real_time_counter");
    this.real_time_counter.set_rdl_access_info(1, 1, 1, 1, 0, 0);
    this.real_time_counter.configure(this, 64, 0, "RW", 1, 64'hffffffffffffffff, 1, 1, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "real_time_counter"}, 0, 64);
  endfunction: build
  
endclass : reg_top_node_reg_rt_ctr

// Register reg_ign_pa
class reg_top_node_reg_ign_pa extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ignore_phy_addr;
  
  function new(string name = "reg_top_node_reg_ign_pa");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ignore_phy_addr = new("ignore_phy_addr");
    this.ignore_phy_addr.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ignore_phy_addr.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ignore_phy_addr"}, 0, 1);
  endfunction: build
  
endclass : reg_top_node_reg_ign_pa

// Register reg_dis_ls
class reg_top_node_reg_dis_ls extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl disable_local_spawn;
  
  function new(string name = "reg_top_node_reg_dis_ls");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.disable_local_spawn = new("disable_local_spawn");
    this.disable_local_spawn.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.disable_local_spawn.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "disable_local_spawn"}, 0, 1);
  endfunction: build
  
endclass : reg_top_node_reg_dis_ls

// Register reg_cdt1
class reg_top_node_reg_cdt1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl node_credits;
  rand uvm_reg_field_rdl overwrite_credits;
  
  function new(string name = "reg_top_node_reg_cdt1");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.node_credits = new("node_credits");
    this.node_credits.set_rdl_access_info(1, 1, 1, 1, 0, 0);
    this.node_credits.configure(this, 16, 0, "RW", 1, 16'h0, 1, 1, 0);
    this.overwrite_credits = new("overwrite_credits");
    this.overwrite_credits.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.overwrite_credits.configure(this, 1, 63, "RW", 0, 1'h0, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "node_credits"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "overwrite_credits"}, 63, 1);
  endfunction: build
  
endclass : reg_top_node_reg_cdt1

// Register reg_cdt2
class reg_top_node_reg_cdt2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl node_threads;
  rand uvm_reg_field_rdl track_migration;
  rand uvm_reg_field_rdl enable_credits;
  
  function new(string name = "reg_top_node_reg_cdt2");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.node_threads = new("node_threads");
    this.node_threads.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.node_threads.configure(this, 16, 0, "RO", 1, 16'h0, 1, 0, 0);
    this.track_migration = new("track_migration");
    this.track_migration.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.track_migration.configure(this, 1, 63, "RW", 0, 1'h1, 1, 1, 0);
    this.enable_credits = new("enable_credits");
    this.enable_credits.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.enable_credits.configure(this, 1, 32, "RW", 0, 1'h1, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "node_threads"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "track_migration"}, 63, 1);
    add_hdl_path_slice({rdl_reg_name, "enable_credits"}, 32, 1);
  endfunction: build
  
endclass : reg_top_node_reg_cdt2

// Register reg_hilo
class reg_top_node_reg_hilo extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl dsp_lo;
  rand uvm_reg_field_rdl dsp_hi;
  
  function new(string name = "reg_top_node_reg_hilo");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.dsp_lo = new("dsp_lo");
    this.dsp_lo.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.dsp_lo.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.dsp_hi = new("dsp_hi");
    this.dsp_hi.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.dsp_hi.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "dsp_lo"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "dsp_hi"}, 1, 1);
  endfunction: build
  
endclass : reg_top_node_reg_hilo

// Register reg_rst
class reg_top_node_reg_rst extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl reset_cluster;
  rand uvm_reg_field_rdl reset_me;
  rand uvm_reg_field_rdl reset_msp;
  rand uvm_reg_field_rdl reset_srio_control;
  rand uvm_reg_field_rdl reset_emif;
  rand uvm_reg_field_rdl reset_srio;
  
  function new(string name = "reg_top_node_reg_rst");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.reset_cluster = new("reset_cluster");
    this.reset_cluster.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_cluster.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 0);
    this.reset_me = new("reset_me");
    this.reset_me.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_me.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.reset_msp = new("reset_msp");
    this.reset_msp.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_msp.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
    this.reset_srio_control = new("reset_srio_control");
    this.reset_srio_control.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_srio_control.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.reset_emif = new("reset_emif");
    this.reset_emif.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_emif.configure(this, 8, 16, "RW", 0, 8'h0, 1, 1, 0);
    this.reset_srio = new("reset_srio");
    this.reset_srio.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.reset_srio.configure(this, 6, 24, "RW", 0, 6'h0, 1, 1, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "reset_cluster"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "reset_me"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "reset_msp"}, 4, 4);
    add_hdl_path_slice({rdl_reg_name, "reset_srio_control"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "reset_emif"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "reset_srio"}, 24, 6);
  endfunction: build
  
endclass : reg_top_node_reg_rst

// Register reg_amm_0
class reg_top_node_reg_amm_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_0_read_req;
  rand uvm_reg_field_rdl amm_0_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_0");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_0_read_req = new("amm_0_read_req");
    this.amm_0_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_0_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_0_read_rsp = new("amm_0_read_rsp");
    this.amm_0_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_0_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_0_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_0_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_0

// Register reg_amm_1
class reg_top_node_reg_amm_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_1_read_req;
  rand uvm_reg_field_rdl amm_1_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_1");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_1_read_req = new("amm_1_read_req");
    this.amm_1_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_1_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_1_read_rsp = new("amm_1_read_rsp");
    this.amm_1_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_1_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_1_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_1_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_1

// Register reg_amm_2
class reg_top_node_reg_amm_2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_2_read_req;
  rand uvm_reg_field_rdl amm_2_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_2");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_2_read_req = new("amm_2_read_req");
    this.amm_2_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_2_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_2_read_rsp = new("amm_2_read_rsp");
    this.amm_2_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_2_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_2_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_2_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_2

// Register reg_amm_3
class reg_top_node_reg_amm_3 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_3_read_req;
  rand uvm_reg_field_rdl amm_3_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_3");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_3_read_req = new("amm_3_read_req");
    this.amm_3_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_3_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_3_read_rsp = new("amm_3_read_rsp");
    this.amm_3_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_3_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_3_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_3_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_3

// Register reg_amm_4
class reg_top_node_reg_amm_4 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_4_read_req;
  rand uvm_reg_field_rdl amm_4_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_4");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_4_read_req = new("amm_4_read_req");
    this.amm_4_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_4_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_4_read_rsp = new("amm_4_read_rsp");
    this.amm_4_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_4_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_4_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_4_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_4

// Register reg_amm_5
class reg_top_node_reg_amm_5 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_5_read_req;
  rand uvm_reg_field_rdl amm_5_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_5");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_5_read_req = new("amm_5_read_req");
    this.amm_5_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_5_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_5_read_rsp = new("amm_5_read_rsp");
    this.amm_5_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_5_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_5_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_5_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_5

// Register reg_amm_6
class reg_top_node_reg_amm_6 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_6_read_req;
  rand uvm_reg_field_rdl amm_6_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_6");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_6_read_req = new("amm_6_read_req");
    this.amm_6_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_6_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_6_read_rsp = new("amm_6_read_rsp");
    this.amm_6_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_6_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_6_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_6_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_6

// Register reg_amm_7
class reg_top_node_reg_amm_7 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl amm_7_read_req;
  rand uvm_reg_field_rdl amm_7_read_rsp;
  
  function new(string name = "reg_top_node_reg_amm_7");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.amm_7_read_req = new("amm_7_read_req");
    this.amm_7_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_7_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.amm_7_read_rsp = new("amm_7_read_rsp");
    this.amm_7_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.amm_7_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "amm_7_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "amm_7_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_amm_7

// Register reg_avs_sc
class reg_top_node_reg_avs_sc extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_sc_read_req;
  rand uvm_reg_field_rdl avs_sc_read_rsp;
  
  function new(string name = "reg_top_node_reg_avs_sc");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_sc_read_req = new("avs_sc_read_req");
    this.avs_sc_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_sc_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_sc_read_rsp = new("avs_sc_read_rsp");
    this.avs_sc_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_sc_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_sc_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_sc_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_avs_sc

// Register reg_ndlt_0
class reg_top_node_reg_ndlt_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_0_read_req;
  rand uvm_reg_field_rdl avs_ndlt_0_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_0");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_0_read_req = new("avs_ndlt_0_read_req");
    this.avs_ndlt_0_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_0_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_0_read_rsp = new("avs_ndlt_0_read_rsp");
    this.avs_ndlt_0_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_0_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_0_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_0_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_0

// Register reg_ndlt_1
class reg_top_node_reg_ndlt_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_1_read_req;
  rand uvm_reg_field_rdl avs_ndlt_1_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_1");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_1_read_req = new("avs_ndlt_1_read_req");
    this.avs_ndlt_1_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_1_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_1_read_rsp = new("avs_ndlt_1_read_rsp");
    this.avs_ndlt_1_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_1_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_1_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_1_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_1

// Register reg_ndlt_2
class reg_top_node_reg_ndlt_2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_2_read_req;
  rand uvm_reg_field_rdl avs_ndlt_2_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_2");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_2_read_req = new("avs_ndlt_2_read_req");
    this.avs_ndlt_2_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_2_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_2_read_rsp = new("avs_ndlt_2_read_rsp");
    this.avs_ndlt_2_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_2_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_2_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_2_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_2

// Register reg_ndlt_3
class reg_top_node_reg_ndlt_3 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_3_read_req;
  rand uvm_reg_field_rdl avs_ndlt_3_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_3");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_3_read_req = new("avs_ndlt_3_read_req");
    this.avs_ndlt_3_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_3_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_3_read_rsp = new("avs_ndlt_3_read_rsp");
    this.avs_ndlt_3_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_3_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_3_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_3_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_3

// Register reg_ndlt_4
class reg_top_node_reg_ndlt_4 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_4_read_req;
  rand uvm_reg_field_rdl avs_ndlt_4_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_4");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_4_read_req = new("avs_ndlt_4_read_req");
    this.avs_ndlt_4_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_4_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_4_read_rsp = new("avs_ndlt_4_read_rsp");
    this.avs_ndlt_4_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_4_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_4_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_4_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_4

// Register reg_ndlt_5
class reg_top_node_reg_ndlt_5 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_5_read_req;
  rand uvm_reg_field_rdl avs_ndlt_5_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_5");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_5_read_req = new("avs_ndlt_5_read_req");
    this.avs_ndlt_5_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_5_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_5_read_rsp = new("avs_ndlt_5_read_rsp");
    this.avs_ndlt_5_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_5_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_5_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_5_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_5

// Register reg_ndlt_6
class reg_top_node_reg_ndlt_6 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_6_read_req;
  rand uvm_reg_field_rdl avs_ndlt_6_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_6");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_6_read_req = new("avs_ndlt_6_read_req");
    this.avs_ndlt_6_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_6_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_6_read_rsp = new("avs_ndlt_6_read_rsp");
    this.avs_ndlt_6_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_6_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_6_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_6_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_6

// Register reg_ndlt_7
class reg_top_node_reg_ndlt_7 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ndlt_7_read_req;
  rand uvm_reg_field_rdl avs_ndlt_7_read_rsp;
  
  function new(string name = "reg_top_node_reg_ndlt_7");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ndlt_7_read_req = new("avs_ndlt_7_read_req");
    this.avs_ndlt_7_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_7_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ndlt_7_read_rsp = new("avs_ndlt_7_read_rsp");
    this.avs_ndlt_7_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ndlt_7_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_7_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ndlt_7_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ndlt_7

// Register reg_me_reg
class reg_top_node_reg_me_reg extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_me_regif_read_req;
  rand uvm_reg_field_rdl avs_me_regif_read_rsp;
  
  function new(string name = "reg_top_node_reg_me_reg");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_me_regif_read_req = new("avs_me_regif_read_req");
    this.avs_me_regif_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_me_regif_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_me_regif_read_rsp = new("avs_me_regif_read_rsp");
    this.avs_me_regif_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_me_regif_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_me_regif_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_me_regif_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_me_reg

// Register reg_ncr_reg
class reg_top_node_reg_ncr_reg extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl avs_ncr_regif_read_req;
  rand uvm_reg_field_rdl avs_ncr_regif_read_rsp;
  
  function new(string name = "reg_top_node_reg_ncr_reg");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.avs_ncr_regif_read_req = new("avs_ncr_regif_read_req");
    this.avs_ncr_regif_read_req.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ncr_regif_read_req.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 0);
    this.avs_ncr_regif_read_rsp = new("avs_ncr_regif_read_rsp");
    this.avs_ncr_regif_read_rsp.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.avs_ncr_regif_read_rsp.configure(this, 32, 32, "RO", 1, 32'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "avs_ncr_regif_read_req"}, 0, 32);
    add_hdl_path_slice({rdl_reg_name, "avs_ncr_regif_read_rsp"}, 32, 32);
  endfunction: build
  
endclass : reg_top_node_reg_ncr_reg

// Register reg_cal_fail
class reg_top_node_reg_cal_fail extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl all_mem_cal_success;
  rand uvm_reg_field_rdl all_mem_cal_fail;
  
  function new(string name = "reg_top_node_reg_cal_fail");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.all_mem_cal_success = new("all_mem_cal_success");
    this.all_mem_cal_success.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.all_mem_cal_success.configure(this, 8, 0, "RO", 1, 8'h0, 1, 0, 0);
    this.all_mem_cal_fail = new("all_mem_cal_fail");
    this.all_mem_cal_fail.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.all_mem_cal_fail.configure(this, 8, 8, "RO", 1, 8'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "all_mem_cal_success"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "all_mem_cal_fail"}, 8, 8);
  endfunction: build
  
endclass : reg_top_node_reg_cal_fail

// Register reg_bar0
class reg_top_node_reg_bar0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl max_wait_delay_bar0;
  
  function new(string name = "reg_top_node_reg_bar0");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.max_wait_delay_bar0 = new("max_wait_delay_bar0");
    this.max_wait_delay_bar0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.max_wait_delay_bar0.configure(this, 17, 0, "RO", 1, 17'h0, 1, 0, 1);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "max_wait_delay_bar0"}, 0, 17);
  endfunction: build
  
endclass : reg_top_node_reg_bar0

// Register reg_bar2
class reg_top_node_reg_bar2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl max_wait_delay_bar2;
  rand uvm_reg_field_rdl sc_bar2_write_burst_set;
  rand uvm_reg_field_rdl sc_bar2_read_burst_set;
  
  function new(string name = "reg_top_node_reg_bar2");
    super.new(name, 64, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.max_wait_delay_bar2 = new("max_wait_delay_bar2");
    this.max_wait_delay_bar2.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.max_wait_delay_bar2.configure(this, 17, 0, "RO", 1, 17'h0, 1, 0, 0);
    this.sc_bar2_write_burst_set = new("sc_bar2_write_burst_set");
    this.sc_bar2_write_burst_set.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.sc_bar2_write_burst_set.configure(this, 6, 40, "RO", 1, 6'h0, 1, 0, 0);
    this.sc_bar2_read_burst_set = new("sc_bar2_read_burst_set");
    this.sc_bar2_read_burst_set.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.sc_bar2_read_burst_set.configure(this, 6, 32, "RO", 1, 6'h0, 1, 0, 0);
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "max_wait_delay_bar2"}, 0, 17);
    add_hdl_path_slice({rdl_reg_name, "sc_bar2_write_burst_set"}, 40, 6);
    add_hdl_path_slice({rdl_reg_name, "sc_bar2_read_burst_set"}, 32, 6);
  endfunction: build
  
endclass : reg_top_node_reg_bar2

// Block node
class block_top_node extends uvm_reg_block_rdl;
  rand reg_top_node_reg_type_node reg_type_node;
  rand reg_top_node_reg_num_nodes reg_num_nodes;
  rand reg_top_node_reg_msp_size reg_msp_size;
  rand reg_top_node_reg_clst_msp reg_clst_msp;
  rand reg_top_node_reg_cores_cluster reg_cores_cluster;
  rand reg_top_node_reg_avl_mon reg_avl_mon;
  rand reg_top_node_reg_dbg_mon reg_dbg_mon;
  rand reg_top_node_reg_rt_ctr reg_rt_ctr;
  rand reg_top_node_reg_ign_pa reg_ign_pa;
  rand reg_top_node_reg_dis_ls reg_dis_ls;
  rand reg_top_node_reg_cdt1 reg_cdt1;
  rand reg_top_node_reg_cdt2 reg_cdt2;
  rand reg_top_node_reg_hilo reg_hilo;
  rand reg_top_node_reg_rst reg_rst;
  rand reg_top_node_reg_amm_0 reg_amm_0;
  rand reg_top_node_reg_amm_1 reg_amm_1;
  rand reg_top_node_reg_amm_2 reg_amm_2;
  rand reg_top_node_reg_amm_3 reg_amm_3;
  rand reg_top_node_reg_amm_4 reg_amm_4;
  rand reg_top_node_reg_amm_5 reg_amm_5;
  rand reg_top_node_reg_amm_6 reg_amm_6;
  rand reg_top_node_reg_amm_7 reg_amm_7;
  rand reg_top_node_reg_avs_sc reg_avs_sc;
  rand reg_top_node_reg_ndlt_0 reg_ndlt_0;
  rand reg_top_node_reg_ndlt_1 reg_ndlt_1;
  rand reg_top_node_reg_ndlt_2 reg_ndlt_2;
  rand reg_top_node_reg_ndlt_3 reg_ndlt_3;
  rand reg_top_node_reg_ndlt_4 reg_ndlt_4;
  rand reg_top_node_reg_ndlt_5 reg_ndlt_5;
  rand reg_top_node_reg_ndlt_6 reg_ndlt_6;
  rand reg_top_node_reg_ndlt_7 reg_ndlt_7;
  rand reg_top_node_reg_me_reg reg_me_reg;
  rand reg_top_node_reg_ncr_reg reg_ncr_reg;
  rand reg_top_node_reg_cal_fail reg_cal_fail;
  rand reg_top_node_reg_bar0 reg_bar0;
  rand reg_top_node_reg_bar2 reg_bar2;
  
  function new(string name = "block_top_node");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 8, UVM_LITTLE_ENDIAN, 1);
    this.reg_type_node = new("reg_type_node");
    this.reg_type_node.configure(this, null, "");
    this.reg_type_node.set_rdl_tag("reg_type_node_");
    this.reg_type_node.set_reg_test_info(0, 0, 2);
    this.reg_type_node.build();
    this.default_map.add_reg(this.reg_type_node, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.reg_num_nodes = new("reg_num_nodes");
    this.reg_num_nodes.configure(this, null, "");
    this.reg_num_nodes.set_rdl_tag("reg_num_nodes_");
    this.reg_num_nodes.set_reg_test_info(0, 0, 2);
    this.reg_num_nodes.build();
    this.default_map.add_reg(this.reg_num_nodes, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.reg_msp_size = new("reg_msp_size");
    this.reg_msp_size.configure(this, null, "");
    this.reg_msp_size.set_rdl_tag("reg_msp_size_");
    this.reg_msp_size.set_reg_test_info(0, 0, 2);
    this.reg_msp_size.build();
    this.default_map.add_reg(this.reg_msp_size, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.reg_clst_msp = new("reg_clst_msp");
    this.reg_clst_msp.configure(this, null, "");
    this.reg_clst_msp.set_rdl_tag("reg_clst_msp_");
    this.reg_clst_msp.set_reg_test_info(0, 0, 32);
    this.reg_clst_msp.build();
    this.default_map.add_reg(this.reg_clst_msp, `UVM_REG_ADDR_WIDTH'h18, "RO", 0);
    this.reg_cores_cluster = new("reg_cores_cluster");
    this.reg_cores_cluster.configure(this, null, "");
    this.reg_cores_cluster.set_rdl_tag("reg_cores_cluster_");
    this.reg_cores_cluster.set_reg_test_info(0, 0, 32);
    this.reg_cores_cluster.build();
    this.default_map.add_reg(this.reg_cores_cluster, `UVM_REG_ADDR_WIDTH'h20, "RO", 0);
    this.reg_avl_mon = new("reg_avl_mon");
    this.reg_avl_mon.configure(this, null, "");
    this.reg_avl_mon.set_rdl_tag("reg_avl_mon_");
    this.reg_avl_mon.set_reg_test_info(0, 0, 2);
    this.reg_avl_mon.build();
    this.default_map.add_reg(this.reg_avl_mon, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.reg_dbg_mon = new("reg_dbg_mon");
    this.reg_dbg_mon.configure(this, null, "");
    this.reg_dbg_mon.set_rdl_tag("reg_dbg_mon_");
    this.reg_dbg_mon.set_reg_test_info(0, 0, 32);
    this.reg_dbg_mon.build();
    this.default_map.add_reg(this.reg_dbg_mon, `UVM_REG_ADDR_WIDTH'h30, "RO", 0);
    this.reg_rt_ctr = new("reg_rt_ctr");
    this.reg_rt_ctr.configure(this, null, "");
    this.reg_rt_ctr.set_rdl_tag("reg_rt_ctr_");
    this.reg_rt_ctr.set_reg_test_info(0, 0, 0);
    this.reg_rt_ctr.build();
    this.default_map.add_reg(this.reg_rt_ctr, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.reg_ign_pa = new("reg_ign_pa");
    this.reg_ign_pa.configure(this, null, "");
    this.reg_ign_pa.set_rdl_tag("reg_ign_pa_");
    this.reg_ign_pa.set_reg_test_info(0, 0, 2);
    this.reg_ign_pa.build();
    this.default_map.add_reg(this.reg_ign_pa, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.reg_dis_ls = new("reg_dis_ls");
    this.reg_dis_ls.configure(this, null, "");
    this.reg_dis_ls.set_rdl_tag("reg_dis_ls_");
    this.reg_dis_ls.set_reg_test_info(0, 0, 2);
    this.reg_dis_ls.build();
    this.default_map.add_reg(this.reg_dis_ls, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.reg_cdt1 = new("reg_cdt1");
    this.reg_cdt1.configure(this, null, "");
    this.reg_cdt1.set_rdl_tag("reg_cdt1_");
    this.reg_cdt1.set_reg_test_info(0, 0, 0);
    this.reg_cdt1.build();
    this.default_map.add_reg(this.reg_cdt1, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.reg_cdt2 = new("reg_cdt2");
    this.reg_cdt2.configure(this, null, "");
    this.reg_cdt2.set_rdl_tag("reg_cdt2_");
    this.reg_cdt2.set_reg_test_info(0, 0, 0);
    this.reg_cdt2.build();
    this.default_map.add_reg(this.reg_cdt2, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.reg_hilo = new("reg_hilo");
    this.reg_hilo.configure(this, null, "");
    this.reg_hilo.set_rdl_tag("reg_hilo_");
    this.reg_hilo.set_reg_test_info(0, 0, 2);
    this.reg_hilo.build();
    this.default_map.add_reg(this.reg_hilo, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.reg_rst = new("reg_rst");
    this.reg_rst.configure(this, null, "");
    this.reg_rst.set_rdl_tag("reg_rst_");
    this.reg_rst.set_reg_test_info(0, 0, 2);
    this.reg_rst.build();
    this.default_map.add_reg(this.reg_rst, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.reg_amm_0 = new("reg_amm_0");
    this.reg_amm_0.configure(this, null, "");
    this.reg_amm_0.set_rdl_tag("reg_amm_0_");
    this.reg_amm_0.set_reg_test_info(0, 0, 32);
    this.reg_amm_0.build();
    this.default_map.add_reg(this.reg_amm_0, `UVM_REG_ADDR_WIDTH'h68, "RO", 0);
    this.reg_amm_1 = new("reg_amm_1");
    this.reg_amm_1.configure(this, null, "");
    this.reg_amm_1.set_rdl_tag("reg_amm_1_");
    this.reg_amm_1.set_reg_test_info(0, 0, 32);
    this.reg_amm_1.build();
    this.default_map.add_reg(this.reg_amm_1, `UVM_REG_ADDR_WIDTH'h70, "RO", 0);
    this.reg_amm_2 = new("reg_amm_2");
    this.reg_amm_2.configure(this, null, "");
    this.reg_amm_2.set_rdl_tag("reg_amm_2_");
    this.reg_amm_2.set_reg_test_info(0, 0, 32);
    this.reg_amm_2.build();
    this.default_map.add_reg(this.reg_amm_2, `UVM_REG_ADDR_WIDTH'h78, "RO", 0);
    this.reg_amm_3 = new("reg_amm_3");
    this.reg_amm_3.configure(this, null, "");
    this.reg_amm_3.set_rdl_tag("reg_amm_3_");
    this.reg_amm_3.set_reg_test_info(0, 0, 32);
    this.reg_amm_3.build();
    this.default_map.add_reg(this.reg_amm_3, `UVM_REG_ADDR_WIDTH'h80, "RO", 0);
    this.reg_amm_4 = new("reg_amm_4");
    this.reg_amm_4.configure(this, null, "");
    this.reg_amm_4.set_rdl_tag("reg_amm_4_");
    this.reg_amm_4.set_reg_test_info(0, 0, 32);
    this.reg_amm_4.build();
    this.default_map.add_reg(this.reg_amm_4, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.reg_amm_5 = new("reg_amm_5");
    this.reg_amm_5.configure(this, null, "");
    this.reg_amm_5.set_rdl_tag("reg_amm_5_");
    this.reg_amm_5.set_reg_test_info(0, 0, 32);
    this.reg_amm_5.build();
    this.default_map.add_reg(this.reg_amm_5, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.reg_amm_6 = new("reg_amm_6");
    this.reg_amm_6.configure(this, null, "");
    this.reg_amm_6.set_rdl_tag("reg_amm_6_");
    this.reg_amm_6.set_reg_test_info(0, 0, 32);
    this.reg_amm_6.build();
    this.default_map.add_reg(this.reg_amm_6, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.reg_amm_7 = new("reg_amm_7");
    this.reg_amm_7.configure(this, null, "");
    this.reg_amm_7.set_rdl_tag("reg_amm_7_");
    this.reg_amm_7.set_reg_test_info(0, 0, 32);
    this.reg_amm_7.build();
    this.default_map.add_reg(this.reg_amm_7, `UVM_REG_ADDR_WIDTH'ha0, "RO", 0);
    this.reg_avs_sc = new("reg_avs_sc");
    this.reg_avs_sc.configure(this, null, "");
    this.reg_avs_sc.set_rdl_tag("reg_avs_sc_");
    this.reg_avs_sc.set_reg_test_info(0, 0, 32);
    this.reg_avs_sc.build();
    this.default_map.add_reg(this.reg_avs_sc, `UVM_REG_ADDR_WIDTH'ha8, "RO", 0);
    this.reg_ndlt_0 = new("reg_ndlt_0");
    this.reg_ndlt_0.configure(this, null, "");
    this.reg_ndlt_0.set_rdl_tag("reg_ndlt_0_");
    this.reg_ndlt_0.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_0.build();
    this.default_map.add_reg(this.reg_ndlt_0, `UVM_REG_ADDR_WIDTH'hb0, "RO", 0);
    this.reg_ndlt_1 = new("reg_ndlt_1");
    this.reg_ndlt_1.configure(this, null, "");
    this.reg_ndlt_1.set_rdl_tag("reg_ndlt_1_");
    this.reg_ndlt_1.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_1.build();
    this.default_map.add_reg(this.reg_ndlt_1, `UVM_REG_ADDR_WIDTH'hb8, "RO", 0);
    this.reg_ndlt_2 = new("reg_ndlt_2");
    this.reg_ndlt_2.configure(this, null, "");
    this.reg_ndlt_2.set_rdl_tag("reg_ndlt_2_");
    this.reg_ndlt_2.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_2.build();
    this.default_map.add_reg(this.reg_ndlt_2, `UVM_REG_ADDR_WIDTH'hc0, "RO", 0);
    this.reg_ndlt_3 = new("reg_ndlt_3");
    this.reg_ndlt_3.configure(this, null, "");
    this.reg_ndlt_3.set_rdl_tag("reg_ndlt_3_");
    this.reg_ndlt_3.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_3.build();
    this.default_map.add_reg(this.reg_ndlt_3, `UVM_REG_ADDR_WIDTH'hc8, "RO", 0);
    this.reg_ndlt_4 = new("reg_ndlt_4");
    this.reg_ndlt_4.configure(this, null, "");
    this.reg_ndlt_4.set_rdl_tag("reg_ndlt_4_");
    this.reg_ndlt_4.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_4.build();
    this.default_map.add_reg(this.reg_ndlt_4, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.reg_ndlt_5 = new("reg_ndlt_5");
    this.reg_ndlt_5.configure(this, null, "");
    this.reg_ndlt_5.set_rdl_tag("reg_ndlt_5_");
    this.reg_ndlt_5.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_5.build();
    this.default_map.add_reg(this.reg_ndlt_5, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.reg_ndlt_6 = new("reg_ndlt_6");
    this.reg_ndlt_6.configure(this, null, "");
    this.reg_ndlt_6.set_rdl_tag("reg_ndlt_6_");
    this.reg_ndlt_6.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_6.build();
    this.default_map.add_reg(this.reg_ndlt_6, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.reg_ndlt_7 = new("reg_ndlt_7");
    this.reg_ndlt_7.configure(this, null, "");
    this.reg_ndlt_7.set_rdl_tag("reg_ndlt_7_");
    this.reg_ndlt_7.set_reg_test_info(0, 0, 32);
    this.reg_ndlt_7.build();
    this.default_map.add_reg(this.reg_ndlt_7, `UVM_REG_ADDR_WIDTH'he8, "RO", 0);
    this.reg_me_reg = new("reg_me_reg");
    this.reg_me_reg.configure(this, null, "");
    this.reg_me_reg.set_rdl_tag("reg_me_reg_");
    this.reg_me_reg.set_reg_test_info(0, 0, 32);
    this.reg_me_reg.build();
    this.default_map.add_reg(this.reg_me_reg, `UVM_REG_ADDR_WIDTH'hf0, "RO", 0);
    this.reg_ncr_reg = new("reg_ncr_reg");
    this.reg_ncr_reg.configure(this, null, "");
    this.reg_ncr_reg.set_rdl_tag("reg_ncr_reg_");
    this.reg_ncr_reg.set_reg_test_info(0, 0, 32);
    this.reg_ncr_reg.build();
    this.default_map.add_reg(this.reg_ncr_reg, `UVM_REG_ADDR_WIDTH'hf8, "RO", 0);
    this.reg_cal_fail = new("reg_cal_fail");
    this.reg_cal_fail.configure(this, null, "");
    this.reg_cal_fail.set_rdl_tag("reg_cal_fail_");
    this.reg_cal_fail.set_reg_test_info(0, 0, 32);
    this.reg_cal_fail.build();
    this.default_map.add_reg(this.reg_cal_fail, `UVM_REG_ADDR_WIDTH'h100, "RO", 0);
    this.reg_bar0 = new("reg_bar0");
    this.reg_bar0.configure(this, null, "");
    this.reg_bar0.set_rdl_tag("reg_bar0_");
    this.reg_bar0.set_reg_test_info(0, 0, 32);
    this.reg_bar0.build();
    this.default_map.add_reg(this.reg_bar0, `UVM_REG_ADDR_WIDTH'h108, "RO", 0);
    this.reg_bar2 = new("reg_bar2");
    this.reg_bar2.configure(this, null, "");
    this.reg_bar2.set_rdl_tag("reg_bar2_");
    this.reg_bar2.set_reg_test_info(0, 0, 32);
    this.reg_bar2.build();
    this.default_map.add_reg(this.reg_bar2, `UVM_REG_ADDR_WIDTH'h110, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_top_node)
endclass : block_top_node

// Base block
class block_top extends uvm_reg_block_rdl;
  rand block_top_node node;
  
  function new(string name = "block_top");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 8, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`TOP_PIO_INSTANCE_PATH, ".pio_logic"});
    this.node = block_top_node::type_id::create("node",, get_full_name());
    this.node.configure(this, "");
    this.node.set_rdl_tag("node_");
    this.node.build();
    this.default_map.add_submap(this.node.default_map, `UVM_REG_ADDR_WIDTH'h200000);
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_top)
endclass : block_top

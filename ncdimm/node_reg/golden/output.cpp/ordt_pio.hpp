//   Ordt 190524.01 autogenerated file 
//   Input: ./node_reg.rdl
//   Parms: ./node_reg.params
//   Date: Sun Dec 06 17:52:46 EST 2020
//

#ifndef __ORDT_PIO_HPP_INCLUDED__
#define __ORDT_PIO_HPP_INCLUDED__

#include <vector>
#include <iostream>
#include <memory>
#include <cstdint>
#include <algorithm>
#include <string>
#include <sstream>
#include <mutex>
#include <atomic>
#define quote(x) #x

enum ordt_read_mode_t : uint8_t {r_none, r_std, r_clr};
enum ordt_write_mode_t : uint8_t {w_none, w_std, w_1clr, w_1set};
class ordt_addr_elem {
  protected:
    uint64_t m_startaddress;
    uint64_t m_endaddress;
  public:
    ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata) = 0;
    virtual int read(const uint64_t &addr, ordt_data &rdata) = 0;
    bool containsAddress(const uint64_t &addr);
    bool isBelowAddress(const uint64_t &addr);
    bool isAboveAddress(const uint64_t &addr);
    bool hasStartAddress(const uint64_t &addr);
    virtual void update_child_ptrs();
};

class ordt_regset : public ordt_addr_elem {
  private:
    ordt_addr_elem* childElem;
    ordt_addr_elem* findAddrElem(const uint64_t &addr);
  protected:
    std::vector<ordt_addr_elem *>  m_children;
  public:
    ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_addr_elem_array : public std::vector<T>, public ordt_addr_elem {
  protected:
    std::vector<T> vec;
    uint64_t m_stride;
  public:
    ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};

template<typename T>
ordt_addr_elem_array<T>::ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride)
   : ordt_addr_elem(_m_startaddress, _m_endaddress + (_m_stride * (_reps - 1))), m_stride(_m_stride) {
   this->reserve(_reps);
   uint64_t el_startaddress = _m_startaddress;
   uint64_t el_endaddress = _m_endaddress;
   for(int idx=0; idx<_reps; idx++) {
      std::unique_ptr<T> new_elem(new T(el_startaddress, el_endaddress));
      this->push_back(*new_elem);
      this->back().update_child_ptrs();
      el_startaddress += _m_stride;
      el_endaddress += _m_stride;
   }
}

template<typename T>
int ordt_addr_elem_array<T>::write(const uint64_t &addr, const ordt_data &wdata) {
   if (this->containsAddress(addr)) {
      uint64_t idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).write(addr, wdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> write to invalid address " << addr << " in arrayed regset\n";
#endif
   return 8;
}

template<typename T>
int ordt_addr_elem_array<T>::read(const uint64_t &addr, ordt_data &rdata) {
   if (this->containsAddress(addr)) {
      uint64_t idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).read(addr, rdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> read to invalid address " << addr << " in arrayed regset\n";
#endif
   rdata.clear();
   return 8;
}

class ordt_reg : public ordt_addr_elem {
  public:
    std::mutex  m_mutex;
    ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress);
    ordt_reg(const ordt_reg &_old);
    virtual void write(const ordt_data &wdata);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void read(ordt_data &rdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_field {
  public:
    int lobit, size;
    T data;
    ordt_read_mode_t r_mode;
    ordt_write_mode_t w_mode;
    ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    void write(const ordt_data &wdata);
    void read(ordt_data &rdata);
    void clear();
};

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_vsize, _data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_init_data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
void ordt_field<T>::write(const ordt_data &wdata) {
   if (w_mode == w_std) wdata.get_slice(lobit, size, data);
   else if (w_mode == w_1set) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data | mask_data;
   }
   else if (w_mode == w_1clr) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data & ~mask_data;
   }
}

template<typename T>
void ordt_field<T>::read(ordt_data &rdata) {
   rdata.set_slice(lobit, size, data);
   if (r_mode == r_clr) clear();
}

template<typename T>
void ordt_field<T>::clear() {
    data = 0;
}

class ordt_rg_node_reg_type_node : public ordt_reg {
  public:
    ordt_field<uint32_t> absolute_node_number;
    ordt_field<uint_fast8_t> condor_system;
    ordt_rg_node_reg_type_node(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_num_nodes : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> log2_num_nodes;
    ordt_rg_node_reg_num_nodes(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_msp_size : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> msp_size;
    ordt_rg_node_reg_msp_size(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_clst_msp : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> num_msps;
    ordt_field<uint_fast8_t> num_clusters;
    ordt_rg_node_reg_clst_msp(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_cores_cluster : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> cores_per_cluster;
    ordt_rg_node_reg_cores_cluster(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_avl_mon : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> enable_pcie_read;
    ordt_field<uint_fast8_t> avalon_monitor_bypass0;
    ordt_field<uint_fast8_t> avalon_monitor_bypass2;
    ordt_field<uint32_t> avalon_timeout_bar0;
    ordt_field<uint32_t> avalon_timeout_bar2;
    ordt_rg_node_reg_avl_mon(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_dbg_mon : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> mfe_debug_enabled;
    ordt_field<uint_fast8_t> ncr_debug_enabled;
    ordt_rg_node_reg_dbg_mon(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_rt_ctr : public ordt_reg {
  public:
    ordt_field<uint64_t> real_time_counter;
    ordt_rg_node_reg_rt_ctr(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ign_pa : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ignore_phy_addr;
    ordt_rg_node_reg_ign_pa(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_dis_ls : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> disable_local_spawn;
    ordt_rg_node_reg_dis_ls(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_cdt1 : public ordt_reg {
  public:
    ordt_field<uint32_t> node_credits;
    ordt_field<uint_fast8_t> overwrite_credits;
    ordt_rg_node_reg_cdt1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_cdt2 : public ordt_reg {
  public:
    ordt_field<uint32_t> node_threads;
    ordt_field<uint_fast8_t> enable_credits;
    ordt_field<uint_fast8_t> track_migration;
    ordt_rg_node_reg_cdt2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_hilo : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> dsp_lo;
    ordt_field<uint_fast8_t> dsp_hi;
    ordt_rg_node_reg_hilo(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_rst : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> reset_cluster;
    ordt_field<uint_fast8_t> reset_msp;
    ordt_field<uint_fast8_t> reset_me;
    ordt_field<uint_fast8_t> reset_emif;
    ordt_field<uint_fast8_t> reset_srio;
    ordt_field<uint_fast8_t> reset_srio_control;
    ordt_rg_node_reg_rst(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_0_read_req;
    ordt_field<uint32_t> amm_0_read_rsp;
    ordt_rg_node_reg_amm_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_1_read_req;
    ordt_field<uint32_t> amm_1_read_rsp;
    ordt_rg_node_reg_amm_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_2 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_2_read_req;
    ordt_field<uint32_t> amm_2_read_rsp;
    ordt_rg_node_reg_amm_2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_3 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_3_read_req;
    ordt_field<uint32_t> amm_3_read_rsp;
    ordt_rg_node_reg_amm_3(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_4 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_4_read_req;
    ordt_field<uint32_t> amm_4_read_rsp;
    ordt_rg_node_reg_amm_4(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_5 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_5_read_req;
    ordt_field<uint32_t> amm_5_read_rsp;
    ordt_rg_node_reg_amm_5(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_6 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_6_read_req;
    ordt_field<uint32_t> amm_6_read_rsp;
    ordt_rg_node_reg_amm_6(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_amm_7 : public ordt_reg {
  public:
    ordt_field<uint32_t> amm_7_read_req;
    ordt_field<uint32_t> amm_7_read_rsp;
    ordt_rg_node_reg_amm_7(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_avs_sc : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_sc_read_req;
    ordt_field<uint32_t> avs_sc_read_rsp;
    ordt_rg_node_reg_avs_sc(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_0_read_req;
    ordt_field<uint32_t> avs_ndlt_0_read_rsp;
    ordt_rg_node_reg_ndlt_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_1_read_req;
    ordt_field<uint32_t> avs_ndlt_1_read_rsp;
    ordt_rg_node_reg_ndlt_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_2 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_2_read_req;
    ordt_field<uint32_t> avs_ndlt_2_read_rsp;
    ordt_rg_node_reg_ndlt_2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_3 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_3_read_req;
    ordt_field<uint32_t> avs_ndlt_3_read_rsp;
    ordt_rg_node_reg_ndlt_3(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_4 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_4_read_req;
    ordt_field<uint32_t> avs_ndlt_4_read_rsp;
    ordt_rg_node_reg_ndlt_4(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_5 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_5_read_req;
    ordt_field<uint32_t> avs_ndlt_5_read_rsp;
    ordt_rg_node_reg_ndlt_5(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_6 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_6_read_req;
    ordt_field<uint32_t> avs_ndlt_6_read_rsp;
    ordt_rg_node_reg_ndlt_6(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ndlt_7 : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ndlt_7_read_req;
    ordt_field<uint32_t> avs_ndlt_7_read_rsp;
    ordt_rg_node_reg_ndlt_7(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_me_reg : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_me_regif_read_req;
    ordt_field<uint32_t> avs_me_regif_read_rsp;
    ordt_rg_node_reg_me_reg(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_ncr_reg : public ordt_reg {
  public:
    ordt_field<uint32_t> avs_ncr_regif_read_req;
    ordt_field<uint32_t> avs_ncr_regif_read_rsp;
    ordt_rg_node_reg_ncr_reg(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_cal_fail : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> all_mem_cal_success;
    ordt_field<uint_fast8_t> all_mem_cal_fail;
    ordt_rg_node_reg_cal_fail(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_bar0 : public ordt_reg {
  public:
    ordt_field<uint32_t> max_wait_delay_bar0;
    ordt_rg_node_reg_bar0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_node_reg_bar2 : public ordt_reg {
  public:
    ordt_field<uint32_t> max_wait_delay_bar2;
    ordt_field<uint_fast8_t> sc_bar2_read_burst_set;
    ordt_field<uint_fast8_t> sc_bar2_write_burst_set;
    ordt_rg_node_reg_bar2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_node : public ordt_regset {
  public:
    ordt_rg_node_reg_type_node reg_type_node;
    ordt_rg_node_reg_num_nodes reg_num_nodes;
    ordt_rg_node_reg_msp_size reg_msp_size;
    ordt_rg_node_reg_clst_msp reg_clst_msp;
    ordt_rg_node_reg_cores_cluster reg_cores_cluster;
    ordt_rg_node_reg_avl_mon reg_avl_mon;
    ordt_rg_node_reg_dbg_mon reg_dbg_mon;
    ordt_rg_node_reg_rt_ctr reg_rt_ctr;
    ordt_rg_node_reg_ign_pa reg_ign_pa;
    ordt_rg_node_reg_dis_ls reg_dis_ls;
    ordt_rg_node_reg_cdt1 reg_cdt1;
    ordt_rg_node_reg_cdt2 reg_cdt2;
    ordt_rg_node_reg_hilo reg_hilo;
    ordt_rg_node_reg_rst reg_rst;
    ordt_rg_node_reg_amm_0 reg_amm_0;
    ordt_rg_node_reg_amm_1 reg_amm_1;
    ordt_rg_node_reg_amm_2 reg_amm_2;
    ordt_rg_node_reg_amm_3 reg_amm_3;
    ordt_rg_node_reg_amm_4 reg_amm_4;
    ordt_rg_node_reg_amm_5 reg_amm_5;
    ordt_rg_node_reg_amm_6 reg_amm_6;
    ordt_rg_node_reg_amm_7 reg_amm_7;
    ordt_rg_node_reg_avs_sc reg_avs_sc;
    ordt_rg_node_reg_ndlt_0 reg_ndlt_0;
    ordt_rg_node_reg_ndlt_1 reg_ndlt_1;
    ordt_rg_node_reg_ndlt_2 reg_ndlt_2;
    ordt_rg_node_reg_ndlt_3 reg_ndlt_3;
    ordt_rg_node_reg_ndlt_4 reg_ndlt_4;
    ordt_rg_node_reg_ndlt_5 reg_ndlt_5;
    ordt_rg_node_reg_ndlt_6 reg_ndlt_6;
    ordt_rg_node_reg_ndlt_7 reg_ndlt_7;
    ordt_rg_node_reg_me_reg reg_me_reg;
    ordt_rg_node_reg_ncr_reg reg_ncr_reg;
    ordt_rg_node_reg_cal_fail reg_cal_fail;
    ordt_rg_node_reg_bar0 reg_bar0;
    ordt_rg_node_reg_bar2 reg_bar2;
    ordt_rset_node(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_root : public ordt_regset {
  public:
    ordt_rset_node node;
    ordt_root();
    ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

#endif // __ORDT_PIO_HPP_INCLUDED__
